#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
ADVANCED METHODS IN NLP 
\begin_inset Newline newline
\end_inset

EXERCISE #x SOLUTION
\end_layout

\begin_layout Author
Uri Avron [uriavron@gmail.com] [308046994]
\begin_inset Newline newline
\end_inset

Ofri Kleinfeld [ofrik@mail.tau.ac.il] [302893680]
\begin_inset Newline newline
\end_inset

Ido Calman [calman.ido@gmail.com] [308353499]
\end_layout

\begin_layout Section*
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Question 1
\end_layout

\begin_layout Standard

\series bold
(a)
\series default
 The program is likely to create long sentences because of the rule [
\series bold
NP -> NP PP
\series default
].
 This is a 
\series bold
recursive
\series default
 rule that may in the 
\begin_inset Quotes eld
\end_inset

best
\begin_inset Quotes erd
\end_inset

 case generate 5 terminals: Left hand side NP would derive [Det Noun] and
 right hand side PP would derive [NP Prep] then the latter NP would again
 derive [Det Noun].
 In this case we would end up with: [Det Noun Prep Det Noun].
 But each time we encounter an NP we have a 
\series bold
0.5 probability 
\series default
to choose the derivation [
\series bold
NP -> NP PP
\series default
] instead, and that would yield another 
\begin_inset Quotes eld
\end_inset

best case 5
\begin_inset Quotes erd
\end_inset

 addition.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

(b) We may calculate the probability of a double adjective sentence.
 For such sentence to be generated, our grammar should choose twice consecutivel
y the rule: [
\series bold
Noun -> Adj Noun
\series default
] because then we would end up with [Noun -> Adj Adj Noun] as expected.
 Note that there are 5 other rules of the form [Noun -> *] which are all
 deriving terminals.
 So the probability when encountering a Noun to choose twice the specified
 rule is 
\begin_inset ERT
status open

\begin_layout Plain Layout

$ 
\backslash
frac{1}{6} 
\backslash
cdot 
\backslash
frac{1}{6} = 
\backslash
frac{1}{36}$
\end_layout

\end_inset

 which is fairly rare.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

(c) In order to generate shorter sentences and make it less rare to generate
 a double adjective sentence, we should change the weights of the rules:
 [
\series bold
NP -> Det Noun
\series default
] from 1 to 2 and [
\series bold
Noun -> Adj Noun
\series default
] from 1 to 5.
 This way the probabilty to derive a recursive NP is 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
frac{1}{3}$
\end_layout

\end_inset

 and the probability for a double adjective is 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
frac{5}{10} = 
\backslash
frac{1}{2}$
\end_layout

\end_inset

.
 Below are the results when running the generator 5 times:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

a 
\series bold
perplexed delicious
\series default
 chief of staff understood the sandwich .
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

is it true that a 
\series bold
fine perplexed perplexed fine
\series default
 sandwich understood a pickle ?
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

is it true that a 
\series bold
delicious perplexed pickled
\series default
 sandwich under the perplexed floor ate the 
\series bold
fine delicious
\series default
 sandwich under a pickle ?
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

a sandwich with a president kissed a 
\series bold
perplexed perplexed
\series default
 pickle .
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

every chief of staff under every sandwich wanted the pickle !
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section*
Question 3
\end_layout

\begin_layout Standard
(a) 
\series bold
General note
\series default
: more information appears in the grammar text file in comments.
 We go over the main rules that make our grammar work with the provided
 examples:
\end_layout

\begin_layout Standard
(a) 
\begin_inset Quotes eld
\end_inset

Sally
\begin_inset Quotes erd
\end_inset

 is a proper noun (an entity) thus [
\series bold
S -> ProperNoun VP
\series default
] was added.
 Proper Nouns are different than Nouns because 
\begin_inset Quotes eld
\end_inset

the Sally
\begin_inset Quotes erd
\end_inset

, for example, is incorrect.
\end_layout

\begin_layout Standard
(b) Conjunctions (Conj) like 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

 were added and accordingly rules to connect two NP / VP with a conjunction
 word in between.
\end_layout

\begin_layout Standard
(c) Intransitive verbs (IVerb) are verbs that appear without an object afterward
s.
\end_layout

\begin_layout Standard
(d) Complementizer (Comp) was added for VP in the following way: [
\series bold
VP -> Verb Comp S
\series default
] so a full sentence S can be expressed after the verb and the word 
\begin_inset Quotes eld
\end_inset

that
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
(e) Added Pronouns (Pron) like 
\begin_inset Quotes eld
\end_inset

it
\begin_inset Quotes erd
\end_inset

 and rules that allow the sentences of the form: 
\begin_inset Quotes eld
\end_inset

it ...
 that
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
(f) The word 
\begin_inset Quotes eld
\end_inset

very
\begin_inset Quotes erd
\end_inset

 is normally an adverb but for our case this is a quantifier for adjectives,
 so a recursive rule [
\series bold
Adj -> Very Adj
\series default
] was added to support multiple 
\begin_inset Quotes eld
\end_inset

very
\begin_inset Quotes erd
\end_inset

s
\end_layout

\begin_layout Standard
(g) Added [
\series bold
VP -> Verb Prep NP
\series default
] so a verb can be performed on an NP with a preposition word (with, on,
 in, under) in between.
\end_layout

\begin_layout Standard
(h) Added [
\series bold
VP -> Be Adj
\series default
] to express phrases like 
\begin_inset Quotes eld
\end_inset

Sally is lazy
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
(i) Added (partial) support for Present Progressive with the rule [
\series bold
VP -> Be PVerb NP
\series default
] where PVerb is the verb in the PP form (eating).
\end_layout

\begin_layout Standard
(j) The rule [
\series bold
VP -> Be NP
\series default
] expresses phrases like 
\begin_inset Quotes eld
\end_inset

Sally is a sandwich
\begin_inset Quotes erd
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

(b) 
\series bold
Relative Clauses
\series default
 have 2 different relations - The first is where the verb is relative: 
\begin_inset Quotes eld
\end_inset

...
 the president that 
\series bold
ate
\series default
 the sandwich
\begin_inset Quotes erd
\end_inset

 so a rule [
\series bold
VP -> Verb NP Clause Comp VP
\series default
] was added.
 The second is where the noun is the relative: 
\begin_inset Quotes eld
\end_inset

the sandwich that 
\series bold
the president
\series default
 ate
\begin_inset Quotes erd
\end_inset

so a rule [
\series bold
VP -> Verb NP Clause Comp NP
\series default
] was added.
 Moreover, we allow some recursion to have consecutive 
\begin_inset Quotes eld
\end_inset

that
\begin_inset Quotes erd
\end_inset

s with a special non-terminal 
\begin_inset Quotes eld
\end_inset

NPV
\begin_inset Quotes erd
\end_inset

 which derives NP VP.
 Then VP may again derive a relative clause and so on.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Singular vs Plural
\series default
 was implemented with special two non-terminals: NPS and VPS.
 We had to make another basic rule [
\series bold
S -> NPS VPS
\series default
] so we decide in the beginning of the derivation if the whole sentence
 is plural or singular.
 This way we know that no matter what NPS we derive, the verb would still
 be in plural form.
 This assures that we do 
\series bold
not 
\series default
derive sentences like 
\begin_inset Quotes eld
\end_inset

Sally choose the president
\begin_inset Quotes erd
\end_inset

 but we do support 
\begin_inset Quotes eld
\end_inset

Sally and the citizens choose the president
\begin_inset Quotes erd
\end_inset

.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

(c) Below are some examples of CKY parsing:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Sally ate a sandwich .
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
(ROOT (S (ProperNoun Sally) (VP (Verb ate) (NP (Det a) (Noun sandwich))))
 (Dot .))
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series default
the citizens choose the president .
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
(ROOT (S (NPS (Dets the) (Nouns citizens)) (VPS (Verbs choose) (NP (Det
 the) (Noun president)))) (Dot .))
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series default
Sally is eating a sandwich .
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
(ROOT (S (ProperNoun Sally) (VP (Be is) (PVerbNP (PVerb eating) (NP (Det
 a) (Noun sandwich))))) (Dot .))
\series default

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

is it true that Sally thought that the chief of staff and the citizens choose
 the president ?
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
(ROOT (IsItTrueThatS (Is is) (ItTrueThatS (It it) (TrueThatS (True true)
 (ThatS (That that) (S (ProperNoun Sally) (VP (Verb thought) (Comp_S (Comp
 that) (S (NPS (NP (Det the) (Noun (Chief chief) (OfStaff (Of of) (Staff
 staff)))) (ConjNP (Conj and) (NPS (Dets the) (Nouns citizens)))) (VPS (Verbs
 choose) (NP (Det the) (Noun president))))))))))) (Question ?))
\series default

\begin_inset Newline newline
\end_inset


\end_layout

\end_body
\end_document
